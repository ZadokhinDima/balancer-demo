events { 
    worker_connections 1024;
}

http {

    lua_shared_dict healthcheck 1m;

    upstream app_servers_us {
        server us_1:5000;
        server us_2:5000;
        server backup_1:5000 backup;
    }

    upstream app_servers_uk {
        server uk_1:5000;
        server backup_1:5000 backup;
    }

    upstream app_servers_default {
        server default_1:5000;
        server backup_1:5000 backup;
    }

    server {
        listen 80;
  
        set $code '';

        location / {
            content_by_lua_block {
                local mmdb = require('mmdb')
                local db, err = mmdb.read('/usr/bin/geoip_db.mmdb')
                if not db then
                    ngx.log(ngx.ERR, "Failed to open GeoLite2 database: ", err)
                    return ngx.exit(500)
                end
                
                local country = db:search_ipv4(ngx.var.remote_addr)
                ngx.log(ngx., "Country: ", country and country.country)
                ngx.log(ngx.INFO, "Country Code: ", country and country.country and country.country.iso_code)
                local country_code = ''
                if country and country.country then
                    country_code = country.country.iso_code
                end
                ngx.var.code = country_code
            }

            set $backend '';

            if ($code = 'US') {
                set $backend http://app_servers_us;
            }
            if ($code = 'GB') {
                set $backend http://app_servers_uk;
            }
            if ($backend = '') {
                set $backend http://app_servers_default;
            }
            proxy_pass $backend;
        }
    }

    init_worker_by_lua_block {
        local hc = require("resty.upstream.healthcheck")

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "app_servers_uk",
            type = "http",
            http_req = "GET /health HTTP/1.0\r\nHost: 0.0.0.0\r\n\r\n",
            interval = 5000,
            timeout = 2,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }

        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker for uk: ", err)
            return
        end

        ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "app_servers_us",
            type = "http",
            http_req = "GET /health HTTP/1.0\r\nHost: 0.0.0.0\r\n\r\n",
            interval = 5000,
            timeout = 2,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }

        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker for us: ", err)
            return
        end

        ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "app_servers_default",
            type = "http",
            http_req = "GET /health HTTP/1.0\r\nHost: 0.0.0.0\r\n\r\n",
            interval = 5000,
            timeout = 2,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }

        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker for default: ", err)
            return
        end
    }
}